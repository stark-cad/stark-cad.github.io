var searchIndex = JSON.parse('{\
"stark":{"doc":"","t":[12,6,3,11,11,0,11,0,11,5,11,0,14,11,11,11,5,5,5,3,3,12,11,11,11,11,11,11,12,12,12,12,12,11,11,12,11,11,11,11,12,11,11,12,11,11,12,11,11,11,11,12,12,12,5,12,12,11,11,11,12,12,11,11,12,12,12,12,11,11,11,11,11,11,12,12,13,13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,13,13,13,13,13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,4,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,5,5,5,5,11,11,11,11,5,0,5,5,5,5,5,0,11,11,11,11,5,5,5,5,11,11,0,12,0,0,5,5,5,5,0,12,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,4,4,13,13,13,17,13,13,13,13,13,13,13,17,17,17,17,17,6,13,13,13,17,13,13,13,13,13,17,8,3,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,17,3,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,13,13,13,13,13,13,3,4,13,13,4,13,13,13,13,3,11,11,11,11,11,11,11,11,12,11,5,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,17,17,7,3,3,3,5,5,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,12,12,11,11,11,11,11,12,12,12,12,11,5,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,5,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,17],"n":["0","Frame","FrameHandle","borrow","borrow_mut","context","from","graphics","into","manager_loop","raw_window_handle","sail","sail_fn","try_from","try_into","type_id","get_icon","init_context","run_loop","Engine","GraphicsState","adapter","add_line","borrow","borrow","borrow_mut","borrow_mut","buffer_size_check","buflen","clear","colors","command_buffers","command_pool","compile_shader","config_swapchain","device","draw_clear_frame","draw_frame","drop","empty_lines","framebuffer","from","from","instance","into","into","lines","make_buffer","make_pipeline","new","new","pipeline_layouts","pipelines","queue_group","render_loop","render_passes","rendering_complete_semaphore","set_clear","set_extent","setup","should_configure_swapchain","state","state_buffer_setup","state_pipeline_setup","submission_complete_fence","surface","surface_color_format","surface_extent","try_from","try_from","try_into","try_into","type_id","type_id","vertex_buffers","vertex_memory","ErrorUnknown","FileCouldNotRead","K_CX_DESTR","K_CX_KEY_B","K_CX_KEY_D","K_CX_KEY_E","K_CX_KEY_F","K_CX_KEY_K","K_CX_KEY_L","K_CX_KEY_M","K_CX_KEY_S","K_CX_KEY_U","K_CX_RECRD","K_CX_REDRW","K_CX_RESIZ","K_CX_SHELL","ParseBadSpecial","ParseInvalidChar","ParseInvalidNum","ParseInvalidString","ParseUnexpectedEnd","SP_DEF","SP_DO","SP_EVAL","SP_FN","SP_IF","SP_QUOTE","SP_SET","SP_WHILE","SYM_ARRAY","S_CM_RECV","S_CM_SEND","S_CR_RECV","S_CR_SEND","S_CUR_POS","S_ENGINE","S_FRAME","S_FR_DIMS","S_MAIN","S_MR_RECV","S_MR_SEND","S_RNDR","S_T_INTERN","SlContextVal","SlErrCode","T_ALISMAP","T_ANYVEC","T_BOOL","T_ERR","T_F32","T_F64","T_HASHMAP","T_HASHVEC","T_I128","T_I16","T_I32","T_I64","T_I8","T_MAP","T_NIL","T_PROC","T_PROC_LAMBDA","T_PROC_NATIVE","T_QUEUE_RX","T_QUEUE_TX","T_REF","T_STDVEC","T_STRING","T_SYMBOL","T_T","T_U128","T_U16","T_U32","T_U64","T_U8","T_VECTOR","arrvec_get_len","arrvec_get_typ","arrvec_init","arrvec_make","arrvec_rplc","borrow","borrow","borrow_mut","borrow_mut","context","core","environment_setup","errcode_get","errcode_init","errcode_make","errcode_set","eval","fmt","fmt","from","from","get_pred_type","get_self_type","insert_native_procs","interpret","into","into","memmgt","obj","parser","queue","repl","run_file","set_pred_type","set_self_type","stdenv","tbl","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","B0","B0BoolF","B0BoolT","B0Other","B1","B16","B16I128","B16Other","B16U128","B1I8","B1Other","B1U8","B2","B2Err","B2I16","B2Other","B2U16","B4","B4F32","B4I32","B4Other","B4Sym","B4U32","B8","B8F64","B8I64","B8Other","B8Ptr","B8U64","BaseSize","Basic","Bool","Cfg","CoreType","ErrCode","F32","F64","HEAD_LEN","I128","I16","I32","I64","I8","Keyword","Module","NUM_128_LEN","NUM_16_LEN","NUM_32_LEN","NUM_64_LEN","NUM_8_LEN","NativeFn","Nil","Other","Other","PTR_LEN","ProcLambda","ProcLambda","ProcNative","ProcNative","Ref","SYMBOL_LEN","SizedBase","SlHead","Symbol","SymbolMode","Type","U128","U16","U32","U64","U8","Vec","VecAny","VecAny","VecArr","VecArr","VecHash","VecHash","VecOther","VecStd","VecStd","VecStr","VecStr","_MIN_HEAD","_SlListPtr","basic_sym_p","bool_get","bool_init","bool_make","bool_set","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cfg","core_cons_copy","core_copy_val","core_eq","core_hash","core_read_field","core_size","core_type","core_write_field","demodes_sym","env_arg_layer_get","env_arg_layer_ins","env_create","env_layer_ins_by_id","env_layer_ins_entry","env_layer_mut_by_id","env_layer_mut_entry","env_lookup","env_lookup_by_id","env_lookup_entry","env_new_arg_layer","env_new_layer","eq","eq","eq","eq","f32_get","f32_init","f32_make","f32_set","f64_get","f64_init","f64_make","f64_set","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_base_size","get_base_spec","get_cfg_all","get_cfg_spec","get_next_list_elt","hash_map_insert","hashvec_get_size","hashvec_make","i128_get","i128_init","i128_make","i128_set","i16_get","i16_init","i16_make","i16_set","i32_get","i32_init","i32_make","i32_set","i64_get","i64_init","i64_make","i64_set","i8_get","i8_init","i8_make","i8_set","id","into","into","into","into","into","into","mode_of_sym","modeize_sym","nil","nil_p","nnil_ref_p","pred_type_p","prep_environment","proc_get_argct","proc_lambda_get_arg","proc_lambda_get_arg_id","proc_lambda_get_body","proc_lambda_make","proc_lambda_set_arg","proc_lambda_set_body","proc_lambda_size","proc_native_get_body","proc_native_make","proc_native_set_body","proc_native_size","proc_p","ptr","rc","read_field_atomic_unchecked","read_field_unchecked","ref_empty_p","ref_get","ref_init","ref_make","ref_set","self_type_p","set_next_list_elt","set_next_list_elt_cmpxcg","stdvec_get_cap","stdvec_get_len","stdvec_idx","stdvec_init","stdvec_make","stdvec_push","stdvec_set_len","str_hash","string_get","string_get_cap","string_get_len","string_init","string_make","string_set","string_set_len","sym_get_id","sym_init","sym_make","sym_set_id","sym_tab_create","sym_tab_get_id","sym_tab_insert","sym_tab_lookup_by_id","sym_tab_lookup_by_str","sym_tab_lookup_id_num","temp_base_sized_p","temp_get_size","temp_init_from","truthy","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","u128_get","u128_init","u128_make","u128_set","u16_get","u16_init","u16_make","u16_set","u32_get","u32_init","u32_make","u32_set","u64_get","u64_init","u64_make","u64_set","u8_get","u8_init","u8_make","u8_set","value_ptr","vec_size","write_field_atomic_unchecked","write_field_cmpxcg_unchecked","write_field_unchecked","Apply","ArgZero","Bind","Branch","DoSeq","EnvOpc","Eval","EvalStack","FrameOffset","LastTop","Mutate","Opcode","PreApp","PreEval","Return","While","_Frame","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","env_and_opcode","eq","eval","eval_expr","fmt","frame_addr","frame_obj","frame_opc","frame_ret","frame_start","frame_top","from","from","from","from","into","into","into","into","is_empty","iter_once","last_top_frame","new","null_loc","pop","pop_frame","push","push_frame_head","resize","return_address","stack_max","stack_start","stack_top","start","start_no_ret","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwind","FreeBlock","MEM_REGION_HEAD_SIZE","MEM_ZONE_HEAD_SIZE","REGION_TABLE","Region","RegionTable","Zone","acquire_mem_region","alloc","append","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cap","field","fmt","fmt","free","from","from","from","from","head","high_array","index","into","into","into","into","len","lock","lock","low_array","new","new_mem_zone","next","region_array","resize","setup","top","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","used","which_mem_area","zone_array","zone_size","parse","process_num","read_list","read_map","read_number","read_quote","read_spec_sym","read_special","read_string","read_symbol","read_value","read_vec","queue_create","queue_rx","queue_tx","ENVFNS"],"q":["stark","","","","","","","","","","","","","","","","stark::context","","","stark::graphics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","stark::sail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","stark::sail::corestark::sail::eval","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","stark::sail::memmgt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","stark::sail::parser","","","","","","","","","","","","stark::sail::queue","","","stark::sail::stdenv"],"d":["","Graphical frame, provided by the desktop environment","Handle for a frame (to pass to rendering system)","","","","","","","Sail interpreter loop for the manager thread","","The Structured Augmentation Interchange Language","Generates a slice of native Sail function pointers along …","","","","Retrieves an icon from a PNG file and outputs it in the …","Uses <code>winit</code> to acquire a graphical frame and create an …","Serves as the main loop for the context thread; occupies …","Sail-specific graphics engine state","Stores all persistent <code>gfx-hal</code> (Vulkan) objects","","Add a line, with two endpoints and a color","","","","","Check whether the buffer has enough space for all vertices","","","","","","Compile GLSL shader code into SPIR-V","Reconfigure the swapchain (usually due to new surface …","","Draw a frame that is cleared to the specified color","Draw a single frame according to the engine state","","Empty the engine of all lines","","","","","","","","Create a new buffer for graphics processing and bind its …","Generate a basic graphics pipeline","Initialize the graphics engine","Initialize the graphics system and track necessary state","","","","Sail interpreter loop for the render thread (holds …","","","Set the clear (background) color","Set the size of the 2D graphics surface, in pixels","Prepare the engine to accept draw calls","","","Acquire memory and create buffer for vertex data","Set up an appropriate graphics pipeline for the engine","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bundles together an object and associated symbol table …","Basic error codes for Sail faults","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a SlContextVal for display","TODO: Gradual typing; more extensible type system; …","Set up the symbol table and environment before …","","","","","","","","","","","Returns the type specifier for a Sail object","Insert a slice of native procedures into the symbol table …","Interprets a Sail expression, returning the formatted …","","","","","","","Accepts an input stream and runs a read - evaluate - …","Runs a Sail file in its own context","","Set the type specifier for a Sail object not of a core …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All type sizes that may be specified in the head","","","Contains all valid values for the high six bits of an …","Core types that must be known in order to assemble the …","","","","Head includes pointer to next list element","","","","","","","","","","","","","Signature for Sail functions implemented in Rust","","","","","","","","","","","Trait for base types that are always the same size","Header for all Sail objects in memory","","The four “modes” a symbol can have","","","","","","","","","","","","","","","","","","","ALL Sail objects that may be independently referenced, …","Pointer to the next element of a linked list; tagged with …","Checks whether a Sail object is a basic symbol","","","","","","","","","","","","","","","","","","Copies the values from a pair of Sail objects of core …","Copies the value from a Sail object of a core type into a …","Returns true if both arguments’ values are equal","Computes a hash value for the provided object","Read from a field of a Sail object of a core type","Returns the size of an object, which must be of a core …","Returns None if the object is not of a core type, or its …","Write to a field of a Sail object of a core type","Returns a symbol set to the default, basic mode","Gets an object from the given argument layer by index","Inserts the given object into the given argument layer …","Creates an environment, which is a list of maps that …","Inserts a symbol with the given ID into the environment, …","Inserts the given symbol into the environment, referring …","Changes the object pointed to by the given ID in the …","Changes the object pointed to by the given symbol’s ID …","Looks up the given symbol in the given environment, …","Looks up the given symbol ID in the given environment, …","Looks up the given symbol ID in the given environment, …","Creates a new association list based environment layer; …","Creates a new hashmap based environment layer","","","","","","","","","","","","","","","","","","","","","","","Gets the base size of a Sail object","Gets base type specifier from a Sail object (its meaning …","Gets the full configuration byte from a Sail object","Gets the size / type configuration from a Sail object","Gets the pointer to the next element from a list element","","","","","","","","","","","","","","","","","","","","","","","","Returns true if both arguments are the same Sail object","","","","","","","Get the mode of a symbol","Set a symbol to one of the four symbol modes","Creates a nil Sail object","Checks whether a pointer, ostensibly to a Sail object, is …","Checks whether a Sail object is a reference to another …","Checks whether a valid Sail object has a type specifier …","Prepares a complete Sail runtime environment, including …","","","","","","","","Gives the overall size of a lambda procedure by argument …","","","","Gives the overall size of a native procedure","Checks whether a Sail object is an executable procedure","","","Read from a field of a Sail object atomically without any …","Read from a field of a Sail object without any checks","","","","","","Checks whether a valid Sail object has a type specifier …","Set the pointer to a list element’s next element","Set the pointer to a list element’s next element only …","","","","","","","","Provides a simple hash function for string slices","","","","","","","","","","","","Creates a symbol table, which maps symbol strings to …","Returns a unique ID for any symbol string; inserts symbol …","Takes the symbol table and a string object to insert, …","Retrieves and returns the string representation of the …","Retrieves and returns the symbol referring to the given …","Retrieves and returns the string representation …","Identifies whether a given type ID refers to a base sized …","Gives the size of a limited range of types (base sized) …","Initializes a Sail object from a base sized type and a …","Returns the truthiness of a valid Sail object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","From a valid Sail object, returns a pointer to the start …","Gives the overall size of a Vec with certain parameters","Write to a field of a Sail object atomically without any …","Write to a field of a Sail object only if the current …","Write to a field of a Sail object without any checks","Procedure, all arguments","First body word","Symbol, object","Predicate result, true path, false path","Remainder of list to do","Environment and opcode (tagged pointer)","List to be evaluated","Sail evaluation stack","Offsets into an evaluation stack frame (header included)","Top of the last frame","Symbol, object","Operation code for the frame; stored as a tag at the …","Procedure, argument list","Expression to be evaluated","Return address","Predicate, result, loop body","Contents of a frame head in this Sail evaluation stack","","","","","","","","","Sail environment and opcode for this frame (tagged …","","Evaluates a Sail expression in a freshly created stack","Evaluates any Sail expression in object form, using the …","","Returns the address of a location offset into the current …","Returns the pointer stored in a location offset into the …","Gets the opcode of the current top frame","Gets the return address of the current top frame","Start of the stack’s top frame","Returns all frame head components of the current top frame","","","","","","","","","Determines whether the stack is currently empty","Consumes one frame off the top of the stack and executes …","Pointer to the frame immediately before this one on the …","Create and initialize a new Sail stack and associated …","Location to write discarded return values","Pops a single word off the stack","Pop a full frame off of the stack","Pushes a single word to the stack, which will always be a …","Push a complete frame head onto the stack","Resize the stack, acquiring new memory if necessary","Address to which to return the value this frame produces","Maximum stack element address","First (bottom) element of the stack","Current top of the stack (frame_start is more useful)","Starts evaluating a Sail expression with an external …","Starts evaluating a Sail expression that will not return …","","","","","","","","","","","","","","","Block of free memory in a zone, resulting from …","","","TODO: allow the user to handle atomic operations if …","A memory region is a linked list of memory zones, all of …","Keeps track of memory zones and which regions they belong …","A zone is a contiguous chunk of memory in which Sail …","Creates a new memory region and accompanying zone","Allocates space in the given region for a Sail object, …","Add a new entry to the table","","","","","","","","","Capacity of all arrays above","Tagged pointer with size of block and pointer to next …","","","Pointer to start of freelist","","","","","","Dynamic array of memory zone high ends","Gets a table entry by index","","","","","Length of all arrays above","Modification lock for region table","Zone allocation lock","Dynamic array of memory zone low ends","Create a new region table","Creates and links in a new memory zone within the given …","Pointer to next zone in region","Dynamic array of memory regions corresponding to above …","Resize the table, reallocating as necessary","Allocate memory and initialize the table","Pointer to end of used portion","","","","","","","","","","","","","Size of used portion","Returns the region and zone in which a given Sail object …","Dynamic array of memory zones corresponding to above …","","Parses a textual Sail expression into a structure of Sail …","Parses a number and creates an object according to its …","Reads a list of values from the input stream and creates a…","Reads an associative map from the input stream and …","Reads a number from the input stream and creates its Sail …","Reads a quoted expression off the input stream, into the …","Reads a specialized symbol from the input stream and …","Reads a special item from the input stream and creates a …","Reads a string from the input stream and creates its Sail …","Reads a basic symbol from the input stream and creates …","Returns the head of a Sail object structure representing …","Reads a vector from the input stream and creates the …","Creates a queue sender and receiver as a linked pair","Receives and returns the object at the head of the queue","Transmits a copy of the given Sail object along the queue",""],"i":[1,0,0,1,1,0,1,0,1,0,1,0,0,1,1,1,0,0,0,0,0,2,3,3,2,3,2,3,3,3,3,2,2,2,2,2,2,3,2,3,2,3,2,2,3,2,3,2,2,3,2,2,2,2,0,2,2,3,2,3,3,3,3,3,2,2,2,2,3,2,3,2,3,2,2,2,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4,5,4,0,0,0,0,0,0,0,0,5,4,5,4,0,0,0,0,5,4,0,5,0,0,0,0,0,0,0,5,5,5,4,4,5,4,5,4,6,7,7,7,6,6,7,7,7,7,7,7,6,7,7,7,7,6,7,7,7,7,7,6,7,7,7,7,7,0,8,9,0,0,9,9,9,0,9,9,9,9,9,8,8,0,0,0,0,0,0,9,7,6,0,7,9,7,9,9,0,0,0,9,0,8,9,9,9,9,9,6,7,9,7,9,7,9,7,7,9,7,9,0,0,0,0,0,0,0,10,11,7,6,8,9,10,11,7,6,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,6,8,9,0,0,0,0,0,0,0,0,7,6,8,9,10,11,7,6,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,7,6,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,7,7,6,6,8,8,9,9,10,11,7,6,8,9,10,11,7,6,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,13,12,12,12,13,12,0,0,13,12,0,12,12,13,12,0,14,15,13,12,14,15,13,12,15,12,0,14,12,14,14,14,14,14,14,14,15,13,12,14,15,13,12,14,14,15,14,14,14,14,14,14,14,15,14,14,14,14,14,14,15,13,12,12,14,15,13,12,14,15,13,12,14,0,0,0,0,0,0,0,0,0,16,16,17,18,19,16,17,18,19,16,17,18,19,19,16,17,18,19,18,16,16,16,17,18,19,16,16,19,16,16,0,19,16,16,16,19,16,17,18,19,16,17,18,19,16,17,18,19,19,0,16,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,[[]],[[]],null,[[]],null,[[]],[[["window",3],["usize",15]]],[[],["rawwindowhandle",4]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["str",15]],[["option",4],["icon",3]]],[[["u32",15],["str",15]]],[[["eventloop",3],["usize",15]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[["shaderkind",4],["str",15]],[["u32",15],["vec",3]]],[[]],null,[[],[["str",15],["result",4]]],[[]],[[]],[[]],null,[[]],[[]],null,[[]],[[]],null,[[["properties",3],["u64",15],["usage",3]]],[[["primitive",4],["str",15]]],[[["graphicsstate",3]]],[[["str",15],["framehandle",3],["u32",15]]],null,null,null,[[["str",15],["framehandle",3],["usize",15]]],null,null,[[]],[[["u32",15]]],[[]],null,null,[[]],[[]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u32",15]],[[],["u32",15]],[[["u32",15]]],[[["copy",8],["sizedbase",8],["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[],["slcontextval",3]],null,[[]],[[],["slerrcode",4]],[[["slerrcode",4]]],[[]],[[["slerrcode",4]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[]],[[["str",15]],[["slerrcode",4],["string",3],["result",4]]],[[]],[[]],null,null,null,null,[[["stdin",3]]],[[["str",15]],[["slerrcode",4],["string",3],["result",4]]],[[["u32",15]]],[[["u32",15]]],null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[["u16",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[["bool",15]]],[[]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["bool",15]],[[],["u32",15]],[[["usize",15]],["sizedbase",8]],[[],["usize",15]],[[],[["coretype",4],["option",4]]],[[["usize",15],["sizedbase",8]]],[[["u32",15]],["u32",15]],[[["u16",15]]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[["u32",15]],["bool",15]],[[],["bool",15]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[["u32",15]]],[[["cfg",4]],["bool",15]],[[["basesize",4]],["bool",15]],[[["symbolmode",4]],["bool",15]],[[["coretype",4]],["bool",15]],[[],["f32",15]],[[["f32",15]]],[[]],[[["f32",15]]],[[],["f64",15]],[[["f64",15]]],[[]],[[["f64",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["basesize",4]],[[],["u8",15]],[[],["u8",15]],[[],["cfg",4]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[],["i128",15]],[[["i128",15]]],[[]],[[["i128",15]]],[[],["i16",15]],[[["i16",15]]],[[]],[[["i16",15]]],[[],["i32",15]],[[["i32",15]]],[[]],[[["i32",15]]],[[],["i64",15]],[[["i64",15]]],[[]],[[["i64",15]]],[[],["i8",15]],[[["i8",15]]],[[]],[[["i8",15]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["symbolmode",4]],[[["symbolmode",4],["u32",15]],["u32",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["u16",15]],[[["u16",15]]],[[["u16",15]],["u32",15]],[[]],[[["u16",15]]],[[["u32",15],["u16",15]]],[[]],[[["u16",15]],["usize",15]],[[],["nativefn",6]],[[["u16",15]]],[[["nativefn",6]]],[[],["usize",15]],[[],["bool",15]],null,null,[[["usize",15]],[["copy",8],["sizedbase",8]]],[[["usize",15]],["sizedbase",8]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["u32",15]],[[],["u32",15]],[[["u32",15]]],[[]],[[["u32",15]]],[[]],[[["u32",15]]],[[["str",15]],["u32",15]],[[],["str",15]],[[],["u32",15]],[[],["u32",15]],[[["str",15]]],[[["u32",15]]],[[["str",15]]],[[["u32",15]]],[[],["u32",15]],[[["u32",15]]],[[]],[[["u32",15]]],[[["u32",15]]],[[["str",15]],["u32",15]],[[],["u32",15]],[[]],[[]],[[["u32",15]]],[[["u32",15]],["bool",15]],[[["u32",15]],["usize",15]],[[["u32",15]]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[["u8",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[["cfg",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u128",15]],[[["u128",15]]],[[]],[[["u128",15]]],[[],["u16",15]],[[["u16",15]]],[[]],[[["u16",15]]],[[],["u32",15]],[[["u32",15]]],[[]],[[["u32",15]]],[[],["u64",15]],[[["u64",15]]],[[]],[[["u64",15]]],[[],["u8",15]],[[["u8",15]]],[[]],[[["u8",15]]],[[]],[[["usize",15]],["usize",15]],[[["copy",8],["sizedbase",8],["usize",15]]],[[["copy",8],["sizedbase",8],["usize",15]],["bool",15]],[[["usize",15],["sizedbase",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["opcode",4]],["bool",15]],[[]],[[]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["usize",15]]],[[],["opcode",4]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],null,[[["usize",15]]],null,[[]],[[]],[[]],[[["opcode",4]]],[[["usize",15]]],null,null,null,null,[[],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,[[["usize",15]]],[[["usize",15],["u8",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],null,null,[[["usize",15]]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],null,null,[[["usize",15]]],[[["usize",15]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],null,null,[[["str",15]],[["slerrcode",4],["result",4]]],[[["str",15]],[["slerrcode",4],["result",4]]],[[["vec",3],["peekable",3]],[["slerrcode",4],["result",4]]],[[["vec",3],["peekable",3]],[["slerrcode",4],["result",4]]],[[["vec",3],["peekable",3]],[["slerrcode",4],["result",4]]],[[["vec",3],["peekable",3]],[["slerrcode",4],["result",4]]],[[["symbolmode",4],["vec",3],["peekable",3]],[["slerrcode",4],["result",4]]],[[["vec",3],["peekable",3]],[["slerrcode",4],["result",4]]],[[["vec",3],["peekable",3]],[["slerrcode",4],["result",4]]],[[["vec",3],["peekable",3]],[["slerrcode",4],["result",4]]],[[["vec",3],["peekable",3]],[["slerrcode",4],["result",4]]],[[["vec",3],["peekable",3]],[["slerrcode",4],["result",4]]],[[]],[[]],[[]],null],"p":[[3,"FrameHandle"],[3,"GraphicsState"],[3,"Engine"],[4,"SlErrCode"],[3,"SlContextVal"],[4,"BaseSize"],[4,"Cfg"],[4,"SymbolMode"],[4,"CoreType"],[3,"SlHead"],[3,"_SlListPtr"],[4,"Opcode"],[4,"FrameOffset"],[3,"EvalStack"],[3,"_Frame"],[3,"RegionTable"],[3,"FreeBlock"],[3,"Region"],[3,"Zone"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};